SHELL := /bin/bash -e

DEPLOY_TARGETS := eks-vpc

.PHONY: env-vars $(DEPLOY_TARGETS)

all-deploy: $(DEPLOY_TARGETS)

# load-balancer: env-vars
# 	@echo "--- Deploy $(ENVIRONMENT) alb cloudformation stack"
# 	sceptre launch-stack $(ENVIRONMENT) load-balancer; \
# 	eval $$(sceptre describe-stack-outputs dev load-balancer --export=envvar); \
# 	aws elbv2 create-listener --load-balancer-arn $$SCEPTRE_LoadBalancer --default-actions Type=redirect,RedirectConfig="{Protocol='HTTPS',Port='443',StatusCode='HTTP_301'}" --protocol HTTP --port 80

eks-vpc: env-vars
	@echo "--- Deploy $(ENVIRONMENT) eks-vpc cloudformation stack"
	ansible-playbook ./playbooks/eks-vpc.yaml

# eks-cluster: env-vars eks-vpc
# 	@echo "--- Deploy $(ENVIRONMENT) eks-cluster cloudformation stack"
# 	ansible-playbook ./playbooks/eks-cluster.yaml

# nginx: env-vars load-balancer ecs-cluster
# 	@echo "--- Deploy $(ENVIRONMENT) nginx cloudformation stack"
# 	sceptre launch-stack $(ENVIRONMENT) nginx
#
# describe-outputs: env-vars load-balancer ecs-cluster nginx
# 	@echo "--- Describe $(ENVIRONMENT) Load Balancer stack"
# 	sceptre describe-stack-outputs dev load-balancer

env-vars:
ifndef ENVIRONMENT
	$(error ENVIRONMENT is undefined)
endif
