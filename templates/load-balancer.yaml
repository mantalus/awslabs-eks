---
AWSTemplateFormatVersion: 2010-09-09


Parameters:
  CertificateArn:
    Type: String
  AccessIpAddress:
    Type: String
    Description: IP CIDR range that can access the ALB
    MinLength: 9
    MaxLength: 18
    AllowedPattern:
      "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription:
      "must be a valid IP CIDR range of the form x.x.x.x/x."

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: !Ref AccessIpAddress
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref AccessIpAddress
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
      VpcId: !ImportValue infra-vpc-base::VpcId

  SecurityGroupALBECS:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for ALB to talk to ECS"
      VpcId: !ImportValue infra-vpc-base::VpcId


  SecurityGroupALBECSIngress01:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SecurityGroupALBECS
      FromPort: 80
      ToPort: 80
      IpProtocol: 6
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupALBECSIngress02:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SecurityGroupALBECS
      FromPort: 8080
      ToPort: 8080
      IpProtocol: 6
      SourceSecurityGroupId: !Ref SecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue infra-vpc-base::SubnetIdPublicAz1
        - !ImportValue infra-vpc-base::SubnetIdPublicAz2
        - !ImportValue infra-vpc-base::SubnetIdPublicAz3
      SecurityGroups:
        - !Ref SecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        # yamllint disable rule:line-length
        - CertificateArn: arn:aws:acm:ap-southeast-2:052482590532:certificate/09eeabe4-cf21-4edf-82e8-d8f2c8b6adea
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # LoadBalancerListenerRedirect:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: redirect
  #         TargetGroupArn: !Ref TargetGroup
  #       - RedirectConfig:
  #         - Host: '#{host}'
  #           Port: 443
  #           Protocol: HTTPS

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId: !ImportValue infra-vpc-base::VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  # ListenerRuleRedirect:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     ListenerArn: !Ref LoadBalancerListener
  #     Priority: 1
  #     Actions:
  #       - Type: redirect
  #         RedirectConfig:
  #             Host: '#{host}'
  #             Protocol: HTTPS
  #             Port: 443

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward


Outputs:

  LoadBalancer:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}::LoadBalancer

  SecurityGroupId:
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}::SecurityGroup

  SecurityGroupIdECS:
    Value: !Ref SecurityGroupALBECS
    Export:
      Name: !Sub ${AWS::StackName}::SecurityGroupECS

  TargetGroup:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${AWS::StackName}::TargetGroup

  ServiceUrl:
    Description: URL of the load balancer for the sample service.
    Value: !Sub http://${LoadBalancer.DNSName}

  SecurityGroup:
    Value: !Ref SecurityGroup
